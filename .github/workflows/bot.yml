name: Run botli        

on:        
  workflow_dispatch:        
    inputs:        
      upgrade:        
        description: "Upgrade to a Lichess bot account?"        
        required: false        
        type: boolean        
        default: "false"        
      matchmaking:        
        description: "Enable matchmaking?"        
        required: false        
        type: boolean        
        default: "false"        
      additional_command:        
        description: "Optional commands to pass (wrap in quotes)"        
        required: false        
        default: ""        
      never_stop:        
        description: "Never stop matchmaking unless it stops itself"        
        required: false        
        type: boolean        
        default: "false"        
      stop_seconds:        
        description: "Seconds to wait before sending stop command (ignored if never_stop ticked)"        
        required: false        
        default: ""        

  push:        
    branches:        
      - "main"        
    paths:        
      - "Myshirt/user_interface.py"        

  schedule:        
    - cron: "1 */5 * * *"        

permissions:        
  actions: write        
  contents: read        

jobs:        
  build:        
    runs-on: ubuntu-latest        
    timeout-minutes: 355        
    env:        
      LICHESS_BOT_TOKEN: ${{ secrets.LICHESS_KEY }}        
      EXO: ${{ secrets.EXO }}        

    steps:        
      - name: Checkout workflow repo        
        uses: actions/checkout@v3        

      - name: Clone private repo (Myshirt)        
        run: |        
          echo "Cloning zonalraid45/Myshirt..."        
          git clone https://x-access-token:${{ secrets.EXO }}@github.com/zonalraid45/Myshirt.git Myshirt        
          ls -la Myshirt        

      - name: Set up Python        
        uses: actions/setup-python@v4        
        with:        
          python-version: '3.13'        

      - name: Cache pip dependencies        
        uses: actions/cache@v4        
        with:        
          path: ~/.cache/pip        
          key: ${{ runner.os }}-pip-${{ hashFiles('Myshirt/requirements.txt') }}        
          restore-keys: |        
            ${{ runner.os }}-pip-        

      - name: Install Python dependencies        
        run: cd Myshirt && pip install -r requirements.txt        

      - name: Inject Secret Token into config.yml        
        run: cd Myshirt && sed -i "s/TokenTimeIsBackBuddyss/${{ secrets.LICHESS_KEY }}/g" config.yml        

      - name: Make Stockfish Executable        
        run: |        
          cd Myshirt        
          chmod +x ./engines/stockfish || true        
          chmod +x ./engines/fairy-stockfish_x86-64-bmi2 || true        

      - name: Install GitHub CLI        
        run: |        
          type -p gh || (curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&        
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&        
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null &&        
          sudo apt update && sudo apt install gh -y)        

      - name: Cancel any previous active workflows        
        run: |        
          echo "Checking for previous active workflows..."        
          CURRENT_RUN_ID=${{ github.run_id }}        

          RUNS=$(gh run list --workflow "Run botli" --status in_progress --json databaseId --jq ".[].databaseId" | grep -v "^$" | grep -v "$CURRENT_RUN_ID" || true)        

          if [ -n "$RUNS" ]; then        
            echo "Found previous active workflow(s): $RUNS"        
            for RUN_ID in $RUNS; do        
              echo "Cancelling workflow $RUN_ID..."        
              gh run cancel "$RUN_ID"        
            done        
          else        
            echo "No previous active workflows found."        
          fi        
        env:        
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        

      - name: Run Bot        
        run: |        
          echo "Starting bot..."        

          UPGRADE="${{ github.event.inputs.upgrade }}"        
          MATCHMAKING="${{ github.event.inputs.matchmaking }}"        
          ADDITIONAL_CMD=${{ toJSON(github.event.inputs.additional_command) }}        
          NEVER_STOP="${{ github.event.inputs.never_stop }}"        
          STOP_SECONDS="${{ github.event.inputs.stop_seconds }}"        

          cd Myshirt        
          CMD="python3 -u user_interface.py"        
          [ "$UPGRADE" = "true" ] && CMD="$CMD --upgrade"        
          [ "$MATCHMAKING" = "true" ] && CMD="$CMD matchmaking"        
          [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"        

          echo "Running command: $CMD"        
          eval "$CMD" &        
          BOT_PID=$!        

          if [ "$MATCHMAKING" = "true" ]; then        
            if [ "$NEVER_STOP" = "true" ]; then        
              echo "Never stop ticked. Stop command will not run."        
            else        
              if ! [[ "$STOP_SECONDS" =~ ^[0-9]+$ ]] || [ "$STOP_SECONDS" -le 0 ]; then        
                echo "Invalid stop_seconds input: $STOP_SECONDS. Skipping stop."        
              else        
                echo "Scheduling stop command in $STOP_SECONDS seconds..."        
                ( sleep "$STOP_SECONDS" && echo "Running stop command..." && python3 -u user_interface.py stop ) &        
              fi        
            fi        
          fi        

          ( sleep 21000 && echo "Time up. Killing bot..." && kill -SIGTERM $BOT_PID ) &        

          wait $BOT_PID        
          echo "Bot ended cleanly."
